* Packages
This part needs to be first. If there are any files missing, then
this will make sure that they are installed.

#+begin_src emacs-lisp
  ;;; automatically install packages
  (require 'package)
  (setq davorb-packages
        '(js2-mode
          ace-jump-mode
          ack
          dockerfile-mode
          markdown-mode
          expand-region
          yaml-mode
          helm
          helm-ack
          color-theme
          leuven-theme
          sass-mode
          highlight-sexp
          highlight-symbol
          js2-refactor
          nodejs-repl
          geiser
          paredit
          rainbow-delimiters))

  (package-initialize)

  (let ((not-installed (remove-if 'package-installed-p davorb-packages)))
    (if not-installed
        (if (y-or-n-p (format "there are %d packages to be installed. install them? "
                              (length not-installed)))
            (progn (package-refresh-contents)
                   (dolist (package not-installed)
                     (package-install package))))))
#+end_src
* Initialization
#+begin_src emacs-lisp
  (require 'helm-config)
  (helm-mode 1)
  (helm-adaptive-mode 1)
  (helm-autoresize-mode 1)

  (require 'color-theme)
  (color-theme-initialize)

  (autoload
    'ace-jump-mode
    "ace-jump-mode"
    "Emacs quickmove minor mode"
    t)

  (require 'expand-region)
  (require 'highlight-symbol)
  (require 'js2-refactor)
  (require 'nodejs-repl)

#+end_src
** Lisp
#+BEGIN_SRC emacs-lisp
  (require 'paredit)
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook #'enable-paredit-mode)

  ;(add-hook 'slime-repl-mode-hook (lambda () (paredit-mode +1)))

  (require 'eldoc)
  (eldoc-add-command
   'paredit-backward-delete
   'paredit-close-round)
#+END_SRC

* Custom functions
** insert-current-date
#+begin_src emacs-lisp
(defun insert-current-date () (interactive)
       (insert (shell-command-to-string "echo -n $(date +%Y-%m-%d)")))
#+end_src
** increment-number-at-point
#+begin_src emacs-lisp
(defun increment-number-at-point ()
  (interactive)
  (skip-chars-backward "0123456789")
  (or (looking-at "[0123456789]+")
      (error "No number at point"))
  (replace-match (number-to-string (1+ (string-to-number
                                               (match-string 0))))))
#+end_src
** add-to-multiple-hooks
Take a mode and add it to multiple hooks.
#+begin_src emacs-lisp
(defun add-to-multiple-hooks (function hooks)
  (mapc (lambda (hook)
    (add-hook hook function)) hooks))
#+end_src
** find-user-init-file
#+begin_src emacs-lisp
  (defun find-user-init-file ()
    "Edit your .emacs file instantly."
    (interactive)
    (find-file user-init-file))
#+end_src

* Starter-kit
** Yasnippet
#+begin_src emacs-lisp
  (starter-kit-load "yasnippet")
#+end_src

** LaTeX
#+begin_src emacs-lisp
  (starter-kit-load "latex")
#+end_src

** bindings
#+begin_src emacs-lisp
  (global-set-key (kbd "C-M-h") 'backward-kill-word)

  ;; align code in pretty way
  (global-set-key (kbd "C-x \\") 'align-regexp)
#+end_src

* Programming modes
** List of lisp modes
#+begin_src emacs-lisp
  (defvar *lisp-hooks*
    '(emacs-lisp-mode-hook
      common-lisp-mode-hook
      lisp-mode-hook
      slime-mode-hook
      clojure-mode-hook
      scheme-mode-hook
      lisp-interaction-mode-hook
      ielm-mode-hook
      geiser-mode))
#+end_src
** List of programming modes
#+begin_src emacs-lisp
(defvar *programming-hooks*
  (append
   *lisp-hooks*
   '(ruby-mode-hook
     js2-mode-hook
     js-mode-hook
     c-mode-hook
     shell-script-mode-hook
     c++-mode-hook
     html-mode-hook
     css-mode-hook
     java-mode-hook)))
#+end_src
** Programming in general
#+begin_src emacs-lisp
  (require 'highlight-symbol)
#+end_src
** Git
#+begin_src emacs-lisp
(setq magit-last-seen-setup-instructions "1.4.0")
#+end_src

** JavaScript
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  (eval-after-load "js2-mode"
    '(progn
       (setq js2-missing-semi-one-line-override t)
       (setq-default js2-basic-offset 2)))
  (setq js2-highlight-level 3)

  (add-hook 'js2-mode-hook #'js2-refactor-mode)
  (add-hook 'js2-mode-hook #'electric-indent-mode)
  (add-hook 'js2-mode-hook #'electric-pair-mode)
#+end_src

#+begin_src emacs-lisp
(font-lock-add-keywords 'espresso-mode
                        '(("\\<\\(FIX\\|TODO\\|FIXME\\|HACK\\|REFACTOR\\):"
                           1 font-lock-warning-face t)))
#+end_src

#+begin_src emacs-lisp
(defun starter-kit-pp-json ()
  "Pretty-print the json object following point."
  (interactive)
  (require 'json)
  (let ((json-object (save-excursion (json-read))))
    (switch-to-buffer "*json*")
    (delete-region (point-min) (point-max))
    (insert (pp json-object))
    (goto-char (point-min))))
#+end_src

** SASS
#+begin_src emacs-lisp
(setq-default scss-compile-at-save nil)
(add-to-list 'auto-mode-alist '("\\.scss\\'" . sass-mode))
#+end_src

** Lisp
#+BEGIN_SRC emacs-lisp
  (add-to-multiple-hooks #'rainbow-delimiters-mode *lisp-hooks*)
#+END_SRC

*** Highlight sexp
#+begin_src emacs-lisp
(setf hl-sexp-background-color "#fff")
(add-to-multiple-hooks 'highlight-sexp-mode *lisp-hooks*)
#+end_src

** Clojure
#+BEGIN_SRC emacs-lisp
  (add-hook 'cider-mode-hook #'eldoc-mode)

  ;; C-z for repl
  (setq cider-repl-display-in-current-window t)
#+END_SRC
* Look 'n feel
#+begin_src emacs-lisp
(menu-bar-mode 1)
(tool-bar-mode 0)

(load-theme 'leuven t)

;; Fontify the whole line for headings (with a background color).
(setq org-fontify-whole-heading-line t)
#+end_src

* Settings
** Backups
#+begin_src emacs-lisp
  ;(let ((temporary-file-directory "~/.saves"))
  (setq backup-directory-alist
        '(("." . "~/.saves")))
  ;  (setq auto-save-file-name-transforms
  ;        `((".*" ,temporary-file-directory t))))
  (setq delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)
  (setq backup-by-copying t) ; safest, but slowest
#+end_src
** Remove trailing whitespace
#+begin_src emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src
** Highlight
*** Highlight symbols
#+begin_src emacs-lisp
(add-to-multiple-hooks 'highlight-symbol-mode
                       *programming-hooks*)
#+end_src
** Dired
   Hide hidden files. You can toggle =dired-omit-mode= with C-x M-o.
#+BEGIN_SRC emacs-lisp
  (require 'dired-x)
  (setq dired-omit-files "^\\...+$")
  (add-hook 'dired-mode-hook (lambda () (dired-omit-mode 1)))
#+END_SRC

* Keybindings
** General
*** Compile
#+begin_src emacs-lisp
(global-set-key [f9] 'compile)
#+end_src
*** ace-jump-mode
"C-c SPC" ==> ace-jump-word-mode
"C-u C-c SPC" ==> ace-jump-char-mode
"C-u C-u C-c SPC" ==> ace-jump-line-mode
#+begin_src emacs-lisp
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
#+end_src
*** expand-region
Binding: C-=
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'er/expand-region)
#+end_src
*** magit
#+begin_src emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
#+end_src
*** electic-buffer-list
#+begin_src emacs-lisp
(global-set-key [f12] 'buffer-menu)
#+end_src
*** interactive highlighting
C-x w . --- highlight word
M-s h .
C-w w r --- unhighlight regexp
M-s h u
#+begin_src emacs-lisp
(global-hi-lock-mode 1)
#+end_src

*** helm
#+begin_src emacs-lisp
(global-set-key (kbd "M-x") 'undefined)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x f") 'helm-find-files)
(global-set-key (kbd "C-x b") 'helm-buffers-list)

;(global-set-key (kbd "C-c <SPC>") 'helm-all-mark-rings)
(global-set-key (kbd "C-x r b") 'helm-filtered-bookmarks)
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "C-,") 'helm-calcul-expression)
#+end_src
*** increment number
#+begin_src emacs-lisp
(global-set-key (kbd "C-c i") 'increment-number-at-point)
#+end_src
** Programming
*** JavaScript
**** js2-refactor-mode
     extract function with *C-c C-x ef*

     1) `ef` is `extract-function`: Extracts the marked expressions out into a new named function.
     2) `em` is `extract-method`: Extracts the marked expressions out into a new named method in an object literal.
     3) `ip` is `introduce-parameter`: Changes the marked expression to a parameter in a local function.
     4) `lp` is `localize-parameter`: Changes a parameter to a local var in a local function.
     5) `eo` is `expand-object`: Converts a one line object literal to multiline.
     6) `co` is `contract-object`: Converts a multiline object literal to one line.
     7) `eu` is `expand-function`: Converts a one line function to multiline (expecting semicolons as statement delimiters).
     8) `cu` is `contract-function`: Converts a multiline function to one line (expecting semicolons as statement delimiters).
     9) `ea` is `expand-array`: Converts a one line array to multiline.
     10) `ca` is `contract-array`: Converts a multiline array to one line.
     11) `wi` is `wrap-buffer-in-iife`: Wraps the entire buffer in an immediately invoked function expression
     12) `ig` is `inject-global-in-iife`: Creates a shortcut for a marked global by injecting it in the wrapping immediately invoked function expression
     13) `ag` is `add-to-globals-annotation`: Creates a `/*global */` annotation if it is missing, and adds the var at point to it.
     14) `ev` is `extract-var`: Takes a marked expression and replaces it with a var.
     15) `iv` is `inline-var`: Replaces all instances of a variable with its initial value.
     16) `rv` is `rename-var`: Renames the variable on point and all occurrences in its lexical scope.
     17) `vt` is `var-to-this`: Changes local `var a` to be `this.a` instead.
     18) `ao` is `arguments-to-object`: Replaces arguments to a function call with an object literal of named arguments.
     19) `3i` is `ternary-to-if`: Converts ternary operator to if-statement.
     20) `sv` is `split-var-declaration`: Splits a `var` with multiple vars declared, into several `var` statements.
     21) `ss` is `split-string`: Splits a `string`.
     22) `uw` is `unwrap`: Replaces the parent statement with the selected region.
     23) `lt` is `log-this`: Adds a console.log() statement for what is at point (or region).
     24) `dt` is `debug-this`: Adds a debug() statement for what is at point (or region).
     25) `sl` is `forward-slurp`: Moves the next statement into current function, if-statement, for-loop or while-loop.
     26) `ba` is `forward-barf`: Moves the last child out of current function, if-statement, for-loop or while-loop.
     27) `k` is `kill`: Kills to the end of the line, but does not cross semantic boundaries.
    #+begin_src emacs-lisp
  (js2r-add-keybindings-with-prefix "C-c C-x")
#+end_src

* Skeletons
** LaTeX
#+begin_src emacs-lisp
  (define-skeleton latex-skeleton
    "Inserts a begin_src-skeleton into the current buffer.
  This only makes sense for empty buffers."
    "\\documentclass[a4paper]{article}\n\n"
    "\\documentclass[a4paper]{article}\n"
    "\\usepackage[utf8]{inputenc}\n"
    "\\usepackage[swedish]{babel} % for Swedish characters\n\n"
    "\\usepackage{fancyvrb}       % for code listings\n"
    "\\fvset{tabsize=4}\n"
    "\\fvset{fontsize=\small}\n\n"
    "\\title{Document title}\n"
    "\\author{Davor Babi\'{c}}\n\n"
    "\\begin{document}\n"
    "\\maketitle\n\n"
    "\\end{document}\n")
#+end_src
* yasnippet
#+BEGIN_SRC emacs-lisp
  (setf yas-snippet-dirs "~/.emacs.d/snippets")
  (yas-reload-all)
#+END_SRC
