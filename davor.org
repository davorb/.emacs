* Packages
This part needs to be first. If there are any files missing, then
this will make sure that they are installed.

#+begin_src emacs-lisp
  ;;; automatically install packages
  (require 'package)
  (setq davorb-packages
        '(js2-mode
          ace-jump-mode
          ack
          dockerfile-mode
          markdown-mode
          expand-region
          yaml-mode
          helm
          helm-ack
          color-theme
          leuven-theme
          sass-mode
          highlight-sexp
          highlight-symbol
          geiser))

  (package-initialize)

  (let ((not-installed (remove-if 'package-installed-p davorb-packages)))
    (if not-installed
        (if (y-or-n-p (format "there are %d packages to be installed. install them? "
                              (length not-installed)))
            (progn (package-refresh-contents)
                   (dolist (package not-installed)
                     (package-install package))))))
#+end_src
* Initialization
#+begin_src emacs-lisp
  (require 'helm-config)
  (helm-mode 1)
  (helm-adaptive-mode 1)
  (helm-autoresize-mode 1)

  (require 'color-theme)
  (color-theme-initialize)

  (autoload
    'ace-jump-mode
    "ace-jump-mode"
    "Emacs quickmove minor mode"
    t)

  (require 'expand-region)

  (require 'highlight-symbol)
#+end_src

* Programming modes
** List of lisp modes
#+begin_src emacs-lisp
  (defvar *lisp-hooks*
    '(emacs-lisp-mode-hook
      common-lisp-mode-hook
      lisp-mode-hook
      slime-mode-hook
      clojure-mode-hook
      scheme-mode-hook
      lisp-interaction-mode-hook
      ielm-mode-hook
      geiser-mode))
#+end_src
** List of programming modes
#+begin_src emacs-lisp
(defvar *programming-hooks*
  (append
   *lisp-hooks*
   '(ruby-mode-hook
     js2-mode-hook
     js-mode-hook
     c-mode-hook
     shell-script-mode-hook
     c++-mode-hook
     html-mode-hook
     css-mode-hook
     java-mode-hook)))
#+end_src
** Git
#+begin_src emacs-lisp
(setq magit-last-seen-setup-instructions "1.4.0")
#+end_src

** JavaScript
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(eval-after-load "js2-mode"
  '(progn
     (setq js2-missing-semi-one-line-override t)
     (setq-default js2-basic-offset 2)))

(setq js2-highlight-level 3)
#+end_src

** SASS
#+begin_src emacs-lisp
(setq-default scss-compile-at-save nil)
(add-to-list 'auto-mode-alist '("\\.scss\\'" . sass-mode))
#+end_src
* Custom functions
** insert-current-date
#+begin_src emacs-lisp
(defun insert-current-date () (interactive)
       (insert (shell-command-to-string "echo -n $(date +%Y-%m-%d)")))
#+end_src
** increment-number-at-point
#+begin_src emacs-lisp
(defun increment-number-at-point ()
  (interactive)
  (skip-chars-backward "0123456789")
  (or (looking-at "[0123456789]+")
      (error "No number at point"))
  (replace-match (number-to-string (1+ (string-to-number
                                               (match-string 0))))))
#+end_src
** add-to-multiple-hooks
Take a mode and add it to multiple hooks.
#+begin_src emacs-lisp
(defun add-to-multiple-hooks (function hooks)
  (mapc (lambda (hook)
    (add-hook hook function)) hooks))
#+end_src
* Look 'n feel
#+begin_src emacs-lisp
(menu-bar-mode 1)
(tool-bar-mode 0)

(load-theme 'leuven t)

;; Fontify the whole line for headings (with a background color).
(setq org-fontify-whole-heading-line t)
#+end_src

* Settings
** Backups
#+begin_src emacs-lisp
  ;(let ((temporary-file-directory "~/.saves"))
  (setq backup-directory-alist
        '(("." . "~/.saves")))
  ;  (setq auto-save-file-name-transforms
  ;        `((".*" ,temporary-file-directory t))))
  (setq delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)
  (setq backup-by-copying t) ; safest, but slowest
#+end_src
** Remove trailing whitespace
#+begin_src emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src
** Highlight
*** Highlight sexp
#+begin_src emacs-lisp
(setf hl-sexp-background-color "#fff")
(add-to-multiple-hooks 'highlight-sexp-mode *lisp-hooks*)
#+end_src
*** Highlight symbols
#+begin_src emacs-lisp
(add-to-multiple-hooks 'highlight-symbol-mode
                       *programming-hooks*)
#+end_src
* Keybindings
** Compile
#+begin_src emacs-lisp
(global-set-key [f9] 'compile)
#+end_src
** ace-jump-mode
"C-c SPC" ==> ace-jump-word-mode
"C-u C-c SPC" ==> ace-jump-char-mode
"C-u C-u C-c SPC" ==> ace-jump-line-mode
#+begin_src emacs-lisp
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
#+end_src
** expand-region
Binding: C-=
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'er/expand-region)
#+end_src
** magit
#+begin_src emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
#+end_src
** electic-buffer-list
#+begin_src emacs-lisp
(global-set-key [f12] 'buffer-menu)
#+end_src
** interactive highlighting
C-x w . --- highlight word
M-s h .
C-w w r --- unhighlight regexp
M-s h u
#+begin_src emacs-lisp
(global-hi-lock-mode 1)
#+end_src

** helm
#+begin_src emacs-lisp
(global-set-key (kbd "M-x") 'undefined)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x f") 'helm-find-files)
(global-set-key (kbd "C-x b") 'helm-buffers-list)

;(global-set-key (kbd "C-c <SPC>") 'helm-all-mark-rings)
(global-set-key (kbd "C-x r b") 'helm-filtered-bookmarks)
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "C-,") 'helm-calcul-expression)
#+end_src
** increment number
#+begin_src emacs-lisp
(global-set-key (kbd "C-c i") 'increment-number-at-point)
#+end_src
* Skeletons
** LaTeX
#+begin_src emacs-lisp
  (define-skeleton latex-skeleton
    "Inserts a begin_src-skeleton into the current buffer.
  This only makes sense for empty buffers."
    "\\documentclass[a4paper]{article}\n\n"
    "\\documentclass[a4paper]{article}\n"
    "\\usepackage[utf8]{inputenc}\n"
    "\\usepackage[swedish]{babel} % for Swedish characters\n\n"
    "\\usepackage{fancyvrb}       % for code listings\n"
    "\\fvset{tabsize=4}\n"
    "\\fvset{fontsize=\small}\n\n"
    "\\title{Document title}\n"
    "\\author{Davor Babi\'{c}}\n\n"
    "\\begin{document}\n"
    "\\maketitle\n\n"
    "\\end{document}\n")
#+end_src
** org-mode
#+begin_src emacs-lisp
    (define-skeleton org-mode-begin-src-skeleton
      "Inserts a skeleton containing begin and end_src, for code
  blocks in org-mode"
      "Language: "
      "\#+begin_src " str "\n"
      "\#+end_src \n")
#+end_src
