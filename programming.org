#+TITLE: Programming

* Install packages
#+BEGIN_SRC emacs-lisp
  (install-packages '(auto-complete
                      paredit))
#+END_SRC
* List of languages
** Lists of language hooks
*** List of LISP hooks
#+BEGIN_SRC emacs-lisp
  (defvar *lisp-hooks*
    '(
      eval-expression-minibuffer-setup-hook
      racket-mode-hook
      clojure-mode-hook
      common-lisp-mode-hook
      geiser-mode-hook
      geiser-repl-mode-hook
      ielm-mode-hook
      lisp-interaction-mode-hook
      lisp-mode-hook
      scheme-mode-hook
      slime-mode-hook
      emacs-lisp-mode-hook
      ))
#+END_SRC
*** Generalized list of programming hooks
    Depends on the list of lisp hooks to already be defined.
#+BEGIN_SRC emacs-lisp
  (defvar *programming-hooks*
    (append
     ,*lisp-hooks*
     '(ruby-mode-hook
       js2-mode-hook
       js-mode-hook
       c-mode-hook
       shell-script-mode-hook
       c++-mode-hook
       html-mode-hook
       css-mode-hook
       haskell-mode-hook
       java-mode-hook)))
#+END_SRC

* General programming settings
** Notify me of long lines
   Show a marker if a line is longer than 80 characters.
#+BEGIN_SRC emacs-lisp
  (add-to-multiple-hooks #'(lambda ()
                             (interactive)
                             (column-marker-1 80))
                         ,*programming-hooks*)
#+END_SRC

* Keybindings
** Indent buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c M-/") 'indent-buffer)
#+END_SRC
* Load other programming modes
#+BEGIN_SRC emacs-lisp
  (org-babel-load-files '("git"
                          "lisp"
                          "ruby"
                          "web"
                          "javascript"
                          "babel"
                          "haskell"
                          "apl"
                          "rust"))
#+END_SRC
