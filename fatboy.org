* Packages
#+BEGIN_SRC emacs-lisp
  (install-packages '(circe
                      circe-notifications))
#+END_SRC
* Paths
#+BEGIN_SRC emacs-lisp
  (setenv "PATH"
          (concat "/home/davor/bin/bin:"
                  (getenv "PATH")))

  (setq exec-path (append exec-path '("~/bin/bin")))
#+END_SRC
** Journal
#+BEGIN_SRC emacs-lisp
  (setf org-journal-dir "~/Documents/text/journal/")
#+END_SRC
* Enviroment variables
  Use the libraries in my home directory
#+BEGIN_SRC emacs-lisp
  (setenv "LD_LIBRARY_PATH"
          (concat "/home/davor/bin/lib"
                  (getenv "LD_LIBRARY_PATH")))
#+END_SRC
* Custom functions
** open-notes-folder
   Direds to the folder that I keep notes in.

#+BEGIN_SRC emacs-lisp
  (defun open-notes-folder ()
    "Direds to the folder that I keep notes in"
    (interactive)
    (dired "~/Documents/text/notes/"))
#+END_SRC
* poetry-mode
#+BEGIN_SRC emacs-lisp
  (load-library "~/.emacs.d/poetry.el")
  (require 'poetry)
#+END_SRC
* Look & Feel
** Themes
   Good ones are =leuven=, =material=, =material-light=.

#+BEGIN_SRC emacs-lisp
  (install-packages '(dracula-theme))
  (load-theme 'dracula t)
#+END_SRC
** Fonts
#+BEGIN_SRC emacs-lisp
  (if window-system
      (set-default-font "Terminus-12"))
#+END_SRC
** Smooth scrolling
#+BEGIN_SRC emacs-lisp

#+END_SRC

* irc
#+BEGIN_SRC emacs-lisp
  (require 'circe)

  ;; password is defined in ~/.private.el
  (let ((private-file "~/.private.el"))
    (when (file-exists-p private-file)
      (load-file private-file)))

  (setq circe-default-realname "davorb"
        circe-ignore-list nil
        circe-server-coding-system '(utf-8 . undecided)
        circe-network-options `(("Freenode"
                                 :tls t
                                 :nick "davorb"
                                 :channels ("#djvi")
                                 :nickserv-password ,freenode-passwd))
        circe-use-cycle-completion t      ; tab completion
        lui-max-buffer-size 30000
        lui-flyspell-p t
        lui-flyspell-alist '(("#djvi" "swedish")
                             ("." "american")))

  (eval-after-load "circe"
    '(progn
       (require 'lui-irc-colors)
       (add-to-list 'lui-pre-output-hook 'lui-irc-colors)))
#+END_SRC
** Hide the join/part spam
#+BEGIN_SRC emacs-lisp
  (setq circe-reduce-lurker-spam t)
#+END_SRC
** Enable =lui= logging
#+BEGIN_SRC emacs-lisp
  (load "lui-logging" nil t)
  (setq lui-logging-directory "~/.logs")
  (setq lui-logging-flush-delay 30)
  (enable-lui-logging-globally)
#+END_SRC
** Track Bar
   Track last reading position in buffer.

#+BEGIN_SRC emacs-lisp
  (setq lui-track-bar-behavior 'before-switch-to-buffer)
  (enable-lui-track-bar)
#+END_SRC
** Notifications
#+BEGIN_SRC emacs-lisp
  (autoload 'enable-circe-notifications "circe-notifications"nil t)

  (eval-after-load "circe-notifications"
    '(setq setq circe-notifications-watch-strings
           '("davor")))

  (add-hook 'circe-server-connected-hook 'enable-circe-notifications)
#+END_SRC

* sup
  Enable =message-mode= when composing emails for =sup=.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("/sup.*eml$" . message-mode))
  (add-hook 'message-mode-hook (lambda ()
                                 (auto-fill-mode 1)
                                 (flyspell-mode 1)))

  ;;; move the cursor down to the first empty line
  (add-hook 'message-mode-hook (lambda ()
    (auto-fill-mode 1)
    (flyspell-mode 1)
    (search-forward-regexp "^$")))
#+END_SRC
* mu4e
#+BEGIN_SRC emacs-lisp
  (require 'mu4e)

  (setq mu4e-maildir "~/.mail")

  (setq mu4e-drafts-folder "/[Gmail].Drafts")
  (setq mu4e-sent-folder   "/[Gmail].Sent Mail")
  (setq mu4e-trash-folder  "/[Gmail].Trash")

  ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
  (setq mu4e-sent-messages-behavior 'delete)

  ;; setup some handy shortcuts
  ;; you can quickly switch to your Inbox -- press ``ji''
  ;; then, when you want archive some messages, move them to
  ;; the 'All Mail' folder by pressing ``ma''.

  (setq mu4e-maildir-shortcuts
      '( ("/INBOX"               . ?i)
         ("/[Gmail].Sent Mail"   . ?s)
         ("/[Gmail].Trash"       . ?t)
         ("/[Gmail].All Mail"    . ?a)))

  ;; allow for updating mail using 'U' in the main view:
  (setq mu4e-get-mail-command "offlineimap")

  ;; something about ourselves
  (setq
     user-mail-address "davor@davor.se"
     user-full-name  "Davor Babic"
     mu4e-compose-signature (concat
                             "Davor Babic\n"
                             "davor@davor.se\n"))

  ;;; don't keep message buffers around
  (setq message-kill-buffer-on-exit t)

  ;;; display rich text and html messages properly
  (setq mu4e-view-prefer-html t
        mu4e-html2text-command "html2text -utf8 -width 72")
#+END_SRC
